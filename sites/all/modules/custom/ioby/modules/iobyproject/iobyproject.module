<?php

/**
 * Constants that map to available project status values in the
 * field_project_status field.
 */
define('PROJECT_STATUS_SUBMITTED', 0);
define('PROJECT_STATUS_OPEN', 1);
define('PROJECT_STATUS_UNDERWAY', 2);
define('PROJECT_STATUS_COMPLETED', 3);
define('PROJECT_STATUS_CANCELED', 4);
define('PROJECT_STATUS_FUNDED', 5);

/**
 * Constants that map to available donation match status values in the
 * field_donation_match_status field.
 */
define('DONATION_MATCH_STATUS_RESERVED', 1);
define('DONATION_MATCH_STATUS_COMPLETE', 2);
define('DONATION_MATCH_STATUS_EXPIRED', 3);

// Our custom audience field for organic groups membership to projects
define('PROJECT_MEMBERSHIP_FIELD', 'project_group');

define('PROJECT_NODE_TYPE', 'project_2');


/**
 * Defines blocks generated by this module
 */
function iobyproject_block_info() {

  $blocks = array();

  // this block displays the project status in the upper right
  $blocks['ioby_project_status'] = array(
    'info' => t('ioby Project status'),
    'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'header',
    'visibility' => 1,
    'pages' => 'project/*'
  );

  // this block is for the addthis.com functionality for projects. Might be replaced by addthis module?
  $blocks['ioby_project_share'] = array(
    'info' => t('ioby Project sharing'),
    'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'header',
    'visibility' => 1,
    'pages' => 'project/*'
  );

  // this block is for the block w/thermometer, $ needed, donation form, etc
  $blocks['ioby_project_funding'] = array(
    'info' => t('ioby Project funding tools'),
    'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'sidebar',
    'visibility' => 1,
    'pages' => 'project/*'
  );

  // this block is for the block w/volunteers
  $blocks['ioby_project_volunteer'] = array(
    'info' => t('ioby Project volunteers'),
    'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'sidebar',
    'visibility' => 1,
    'pages' => 'project/*'
  );

  // this block is for the block w/the map
  $blocks['ioby_project_location'] = array(
    'info' => t('ioby Project location'),
    'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'sidebar',
    'visibility' => 1,
    'pages' => 'project/*'
  );

  // this block is for the block w/the project leader bio
  $blocks['ioby_project_leader'] = array(
    'info' => t('ioby Project leader bio'),
    'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'sidebar',
    'visibility' => 1,
    'pages' => 'project/*'
  );

  // this block is for the block w/the map
  $blocks['ioby_project_fullmap'] = array(
    'info' => t('ioby Project map'),
    'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'sidebar',
    'visibility' => 1,
    'pages' => '<front>'
  );

  $blocks['project_incentives'] = array(
    'info' => t('ioby Project incentives'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['project_countdown'] = array(
    'info' => t('Project deadline countdown'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}


/**
 * Defines the callbacks to generate the blocks created by this module
 */
function iobyproject_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'ioby_project_status':
      $block['subject'] = t('Status:');
      $block['content'] = iobyproject_status();
      break;
    case 'ioby_project_share':
      $block['subject'] = t('Share This Project');
      $block['content'] = iobyproject_sharing();
      break;
    case 'ioby_project_funding':
      $block['subject'] = t(''); //doesn't need a title
      $block['content'] = iobyproject_funding();
      break;
    case 'ioby_project_volunteer':
      $block['subject'] = t('Volunteers Needed!');
      $block['content'] = iobyproject_volunteers();
      break;
    case 'ioby_project_location':
      $block['subject'] = t('where it\'s at');
      $block['content'] = iobyproject_location();
      break;
    case 'ioby_project_leader':
      $block['subject'] = t('about the project leader');
      $block['content'] = iobyproject_leader();
      break;
    case 'ioby_project_fullmap':
      $block['subject'] = t('explore');
      $block['content'] = iobyproject_fullmap();
      break;
    case 'project_incentives':
      $block['subject'] = t('Incentives');
      $block['content'] = iobyproject_incentives();
      break;
    case 'project_countdown':
      $block['subject'] = t('Project Deadline Countdown');
      $block['content'] = iobyproject_countdown();
      break;
  }

  return $block;
}

/**
 *  Implements hook_og_permission().
 */
function iobyproject_og_permission() {
  $permissions = array();
  $permissions['view project donations'] = array(
    'title' => t('View donations for project'),
    'description' => t('Allow user to view information about donations made to the project.'),
    'restrict access' => TRUE,
    'roles' => array(OG_AUTHENTICATED_ROLE),
  );

  return $permissions;
}

/**
 *  Implements hook_og_user_access_alter().
 */
function iobyproject_og_user_access_alter(&$perm, $context) {
  if ($context['group']->type == 'project_2') {
    if (isset($context['group']->project_form_version) && $context['group']->project_form_version == 1) {
      switch ($context['string']) {
        case 'update project_2-field_project_address field':
        case 'update project_2-field_project_cost field':
          $perm[$context['string']] = FALSE;
          break;
      }
    }
//    if (preg_match('/project_blog content/i', $context['string']) === 1 && !in_array($context['group']->field_project_status[LANGUAGE_NONE][0]['value'], array(PROJECT_STATUS_OPEN, PROJECT_STATUS_UNDERWAY))) {
//      // Remove permissions to create/update/delete project updates
//      $perm[$context['string']] = FALSE;
//    }
    if ($context['string'] == 'update group' && $context['group']->field_project_status[LANGUAGE_NONE][0]['value'] != PROJECT_STATUS_OPEN) {
      // Remove permission edit the project ***NOTE: The iobyproject_node_access implementation below is needed to actually enforce this since OG doesn't seem to pick this up properly.
      $perm[$context['string']] = FALSE;
    }
  }
}

/**
 *  Implements hook_node_access().
 */
function iobyproject_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : (is_array($node) ? $node['type'] : $node->type);
  if ($type == 'project_2' && !is_string($node)) {
    if (module_exists('og') && og_is_group('node', $node)) {
      if ($op == 'update' && !$access = og_user_access_entity('update group', 'node', $node, $account)) {
        // This is needed to enforce our custom permission based on the project
        // status field that is implemented in iobyproject_og_user_access_alter().
        // For some reason removing the update group permission doesn't work
        // which I think is a bug in OG
        return NODE_ACCESS_DENY;
      }
      if ($op == 'delete' && !og_user_access_entity('administer group', 'node', $node, $account)) {
        // Project administrators shouldn't be allowed to delete the group unless
        // they have the administer group permission.
        return NODE_ACCESS_DENY;
      }
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function iobyproject_preprocess_page(&$variables) {
  if (strtolower(substr($_GET['q'], -4)) == 'edit' && isset($variables['node'])) {
    if ($variables['node']->type == 'project_2') {
      $variables['theme_hook_suggestions'][] = 'page__node__add__project_2';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function iobyproject_preprocess_node(&$vars) {
  $node = $vars['node'];

  if ($node->type == 'project_2' && $vars['view_mode'] == 'full' && node_is_page($node)) {
    $vars['sponsors'] = iobyproject_show_sponsor($node->nid);

    $vars['donations_access'] = FALSE;
    $vars['project_update_link'] = '';


    $gallery_items = array();

    if (!empty($node->field_project_video[LANGUAGE_NONE][0])) {
      $media_wrapper = isfield_get_media_wrapper($node->field_project_video[LANGUAGE_NONE][0]);
      $gallery_thumb = theme('image',
        array('path' => $media_wrapper->thumbnail(),
          'width' => 300,
          'height' => 186,
          'class' => 'project-gallery__tn',
          'alt' => $node->field_project_video[LANGUAGE_NONE][0]['title'])
      );

      $gallery_items[] = l($gallery_thumb,
        $node->field_project_video[LANGUAGE_NONE][0]['url'],
        array(
          'html' => TRUE,
          'query' => $node->field_project_video[LANGUAGE_NONE][0]['query'],
          'attributes' => array(
            'class' => 'project-gallery__link mfp-iframe',
            'title' => $node->field_project_video[LANGUAGE_NONE][0]['title']),
        ));
    }

    if (!empty($node->field_project_photo[LANGUAGE_NONE])) {
      foreach($node->field_project_photo[LANGUAGE_NONE] as $photo) {
        $photo_style = empty($gallery_items) ? 'gallery_feature' : 'gallery_thumbnail';
        $gallery_thumb = theme('image_style', array(
          'style_name' => $photo_style,
          'path' => $photo['uri'],
          'class' => 'project-gallery__tn',
          'alt' => $photo['alt'],
        ));

        $gallery_items[] = l($gallery_thumb,
          image_style_url('gallery_large', $photo['uri']),
          array(
            'html' => TRUE,
            'attributes' => array(
              'class' => 'project-gallery__link mfp-image',
              'title' => $photo['title'],
              'data-description' => $photo['alt'],
            ),
          ));
      }
    }

    $vars['project_gallery'] = theme('iobyproject-project-gallery', array('gallery_items' => $gallery_items));
    drupal_add_js(libraries_get_path('magnificent-popup') . '/dist/jquery.magnific-popup.min.js');
    drupal_add_css(libraries_get_path('magnificent-popup') . '/dist/magnific-popup.css');
    drupal_add_js(drupal_get_path('module', 'iobyproject') . '/js/ioby-magnific-popup.js', array('scope' => 'footer'));


    if (module_exists('og')) {
      $vars['donations_access'] = og_user_access_entity('view project donations', 'node', $node);
      $elements = og_node_create_links('node', $node->nid, PROJECT_MEMBERSHIP_FIELD, NULL, array('project_blog'));
      $project_update_link = drupal_render($elements);
      if (!empty($project_update_link)) {
        $vars['project_update_link'] = preg_replace('/>Project update</i', ' class="button" id="project-update-button">post an update<', $project_update_link);
      }
    }

    //build rss links
    $project_updates_view = views_get_view('project_updates');
    $rss_view_display = $project_updates_view->display['feed_1'];
    $vars['project_update_rss_path'] = $rss_view_display->display_options['path'];
  }
}

/**
 * Implements hook_image_default_styles().
 */
function iobyproject_image_default_styles() {
  $styles = array();

  $styles['gallery_thumbnail'] = array(
    'label' => 'Gallery Thumbnail',
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 50, 'height' => 50),
        'weight' => 0,
      ),
    ),
  );

  $styles['gallery_feature'] = array(
    'label' => 'Gallery Feature',
    'effects' => array(
      array(
        'name' => 'canvasactions_aspect',
        'data' => array(
          'portrait' => 'gallery_feature_portrait',
          'landscape' => 'gallery_feature_landscape',
          'ratio_adjustment' => 1,
        ),
        'weight' => 0,
      ),
    ),
  );

  $styles['gallery_feature_portrait'] = array(
    'label' => 'Gallery Feature - Portrait',
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array('width' => 300),
        'weight' => 0,
      ),
    ),
  );

  $styles['gallery_feature_landscape'] = array(
    'label' => 'Gallery Feature - Landscape',
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array('width' => 300, 'height' => 186),
        'weight' => 0,
      ),
    ),
  );

  $styles['gallery_large'] = array(
    'label' => 'Gallery Large',
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array('width' => 675),
        'weight' => 0,
      ),
    ),
  );

  return $styles;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function iobyproject_ctools_plugin_api($module, $api) {
  if ($module == 'field_validation' && $api == 'default_field_validation_rules') {
    return array('version' => 2);
  }
}

/**
 * Implements hook_element_info_alter().
 */
function iobyproject_element_info_alter(&$type) {
  if (isset($type['location_element'])) {
    $type['location_element']['#process'][] = '_iobyproject_process_location';
  }

  $placeholder_types = array('textfield', 'textarea');
  foreach ($placeholder_types as $type_name) {
    $type[$type_name]['#process'][] = '_iobyproject_set_placeholder_text';
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function iobyproject_theme_registry_alter(&$theme_registry) {
  $theme_registry['date_combo']['function'] = 'theme_iobyproject_date_combo';
  $theme_registry['textfield']['function'] = 'theme_iobyproject_textfield';
}

/**
 * Date combo theme override to get rid of the fieldset display
 */
function theme_iobyproject_date_combo($variables) {
  return theme('form_element', $variables['element']);
}

/**
 * Override theme_textfield to prepend inputs with a span tag
 */
function theme_iobyproject_textfield($variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'text';
  element_set_attributes($element, array('id', 'name', 'value', 'size', 'maxlength'));
  _form_set_class($element, array('form-text'));

  $extra = '';
  if ($element['#autocomplete_path'] && drupal_valid_path($element['#autocomplete_path'])) {
    drupal_add_library('system', 'drupal.autocomplete');
    $element['#attributes']['class'][] = 'form-autocomplete';

    $attributes = array();
    $attributes['type'] = 'hidden';
    $attributes['id'] = $element['#attributes']['id'] . '-autocomplete';
    $attributes['value'] = url($element['#autocomplete_path'], array('absolute' => TRUE));
    $attributes['disabled'] = 'disabled';
    $attributes['class'][] = 'autocomplete';
    $extra = '<input' . drupal_attributes($attributes) . ' />';
  }

  $output = '<span class="form_icon"></span><input' . drupal_attributes($element['#attributes']) . ' />';

  return $output . $extra;
}

/**
 * Callback to process the project address location element.
 */
function _iobyproject_process_location($element, $form_state, $form) {
  if ($element['#name'] == 'field_contact_address['. LANGUAGE_NONE . '][0]') {
    $element['#title'] = '';

    $element['street']['#title'] = t('Your Street Address');
    $element['street']['#description'] = t('street address, P.O. box, company name, c/o');

    $element['additional']['#title'] = t('Address Continued');
    $element['additional']['#description'] = t('apartment, suite, unit, building, floor, etc.');

    $element['city']['#title'] = t('Your City');

    $element['province']['#title'] = t('Your State');

    $element['postal_code']['#title'] = t('Your Zip');

    unset($element['#theme_wrappers'], $element['#pre_render'][0], $element['delete_location']);
  }
  elseif ($element['#name'] == 'field_project_address['. LANGUAGE_NONE . '][0]') {
    $element['#title'] = '';
    $element['street']['#title'] = t('Project Street Address');
    $element['street']['#description'] = t('If your project does not have an easy to find address, list cross streets or recognizable landmarks.');
    $element['additional']['#title'] = t('Address Continued');
    $element['additional']['#description'] = t('apartment, suite, unit, building, lot, floor, lot');
    $element['city']['#title'] = t('Project City');
    $element['province']['#title'] = t('Project State');
    $element['postal_code']['#title'] = t('Project Zip');

    unset($element['locpick']['map_instructions'], $element['locpick']['instructions'], $element['#theme_wrappers'], $element['#pre_render'][0], $element['delete_location']);

    $element['locpick']['map_title'] = array(
      '#weight' => -99,
      '#markup' => '<label>Where will your project be taking place?</label>',
    );
    $element['locpick']['map_help'] = array(
      '#weight' => -98,
      '#markup' => '<div class="description">Show donors where your project will be taking place. Drag the location marker on the map to identify the approximate project location.</div>'
    );

    $element['locpick']['user_latitude']['#description'] = t("<span>If you'd like more precision, enter project coordinates here. Feel free to leave these fields blank as long as you supplied an address above.</span>");

    // Only allow admins to see this checkbox
    $element['re_geocode_location']['#access'] = user_access('administer content');
  }

  return $element;
}

/**
 * Callback to set html5 placeholder text for some fields.
 */
function _iobyproject_set_placeholder_text($element, $form_state, $form) {
  if (isset($element['#field_name'])) {
    switch ($element['#field_name']) {
      case 'field_budget_item_cost':
        $element['#attributes']['placeholder'] = '$ 0.00';
        break;
      case 'field_budget_item_description':
        $element['#attributes']['placeholder'] = t('Enter Description');
        break;
    }
  }

  return $element;
}

/**
 * Block that shows the current project's status
 */
function iobyproject_status() {
  $project = menu_get_object();

  if (empty($project)) {
    return '';
  }

  $project_status_field = field_view_field('node', $project, 'field_project_status', 'full');
  $project_status = render($project_status_field);

  if ($project->field_project_volunteers['und'][0]['value']) {
    $project_status .= ", Accepting Volunteers";
  }

  return array('#markup' => $project_status);
}

/*
 * Block that allows users to share this project
 */
function iobyproject_sharing() {
  $share_block = '<!-- AddThis Button BEGIN -->
<div class="addthis_toolbox addthis_default_style ">
<a class="addthis_button_preferred_1"></a>
<a class="addthis_button_preferred_2"></a>
<a class="addthis_button_preferred_3"></a>
<a href="//www.addthis.com/bookmark.php?v=250&amp;pubid=xa-4d9e08d95bbbe91b" class="addthis_button_compact"></a>
</div>
<script type="text/javascript" src="//s7.addthis.com/js/250/addthis_widget.js#pubid=ioby"></script>
<!-- AddThis Button END -->';

  return array('#markup' => $share_block);
}

/**
 * Gather amount needed for funding
 */
function iobyproject_funded_amount($node) {
  $info = iobyproject_amount_raised($node->nid);
  $raised = round($info['amount_raised']);
  $budget = $info['amount_needed'];
  $needed = $info['amount_to_go'];
  return array($needed, $budget, $raised);
}


/**
 * Block for viewing thermometer and making donations to projects
 */
function iobyproject_funding() {
  $project = menu_get_object();

  if (empty($project)) {
    return '';
  }

  $info = iobyproject_amount_raised($project->nid);

  $project_status_field = field_get_items('node', $project, 'field_project_status');
  if (isset($project_status_field[0]['value'])) {
    $status = $project_status_field[0]['value'];
  }
  else {
    $status = PROJECT_STATUS_OPEN;
  }

  $suppress_form = ($status >= PROJECT_STATUS_UNDERWAY && $status != PROJECT_STATUS_FUNDED);

  $funding = array(
    'raised' => round($info['amount_raised']),
    'needed' => $info['amount_to_go'],
    'total'  => $info['amount_needed'],
    'pct'    => $info['pct_done'],
    'list'   => array(
      array(
        'number' => 8,
        'value'  => 5
      ),
      array(
        'number' => 19,
        'value'  => 20
      ),
      array(
        'number' => 4,
        'value'  => 50
      ),
      array(
        'number' => 3,
        'value'  => 100
      ),
    ),
    'suppress' => $suppress_form,
  );
  $donate_form = drupal_get_form('iobyproject_donation_form');
  $funding['form'] = '';

  if($suppress_form) {
    $funding['form'] = '<div class="funded"><h2>Funded!</h2>' . t("This project has been fully funded and is no longer collecting donations.") . '</div>';
  }
  else {
    if ($status == PROJECT_STATUS_FUNDED) {
      $funding['form'] = '<div class="funded"><h2>Goal Reached!</h2>' . t("This project met its goal, but will still gladly accept donations.") . '</div>';
    }
    $funding['form'] .= drupal_render($donate_form);
  }

  return theme('iobyproject-funding-view', array('funding' => $funding));
}


function iobyproject_volunteers() {
  $node = menu_get_object();
  $num_volunteers = 5; //hardcoded ? needs to be set somehow!

  //do nothing if project doesn't need volunteers
  if (!isset($node->field_project_volunteers[LANGUAGE_NONE]) || !$node->field_project_volunteers['und'][0]['value'] ) return FALSE;

  //otherwise, print the block contents
  $ret = '<p>' . t("This project's leader is looking for volunteers to help out:") . '</p>';
  if (isset($node->field_project_vol_reason['und']) && !empty($node->field_project_vol_reason['und'][0]['safe_value'])) {
    $ret .= '<blockquote>' . $node->field_project_vol_reason['und'][0]['safe_value'] . '</blockquote>';
  }
  $ret .= '<div class="alignright"><a class="colorbox-load link-action" href="/volunteerform/' . $node->nid . '?width=500&amp;height=500&amp;iframe=true&amp;ajax=1" id="volunteer">Inquire about volunteering<i></i></a></div>';
  //$ret .= '<ul class="donation_list"><li><span class="number">'.$num_volunteers.'</span>people have volunteered via ioby.org</li></ul>';
  return array('#markup' => $ret);
}


function iobyproject_location() {
  $node = menu_get_object();

  if (empty($node) || (isset($node->field_hide_project_map[LANGUAGE_NONE][0]['value']) && $node->field_hide_project_map[LANGUAGE_NONE][0]['value'] == TRUE)) {
    return '';
  }

  $loc = $node->field_project_address;

  if(array_key_exists(LANGUAGE_NONE, $loc)) {
    $lat = $loc[LANGUAGE_NONE][0]['latitude'];
    $lon = $loc[LANGUAGE_NONE][0]['longitude'];
    $has_coordinates = (int)($lat + $lon);
    if($has_coordinates) {
      //setting up array per /help/gmap/api and help/gmap/array
      $map = array(
        'id'          => 'project-map',
        'width'       => '304px',
        'height'      => '250px',
        'latitude'    => $lat,
        'longitude'   => $lon,
        'zoom'        => 15,
        'maptype'     => 'Map',
        'controltype' => 'Small',
        'mtc'         => 'menu',
        'markername'  => 'lblue',
        'markers'     => array(
          array(
            'text'      => $node->title,
            'latitude'  => $lat,
            'longitude' => $lon,
          ),
        )
      );
      $element = array('#type' => 'gmap', '#gmap_settings' => $map);

      return array('#markup' => drupal_render($element));
    }
  }
}


function iobyproject_fullmap() {

  //setting up array per /help/gmap/api and help/gmap/array
  $map = array(
    'id'          => 'projects-full-map',
    'width'       => '304px',
    'height'      => '250px',
    'latitude'    => '38.68551',
    'longitude'   => '-95.976562',
    'zoom'        => 3,
    'maptype'     => 'Map',
    'controltype' => 'Small',
    'mtc'         => 'menu',
    'markername'  => 'lblue',
    'rmtcallback' => url('projectinfo/popup'),
  );

  //get the view and populate the map
  $projects = views_get_view_result('project_location', 'ctools_context_1');
  $markers = array();
  $mapped = array();  //only map a project once, even if it has multiple locations (first location is the one we want)

  foreach ($projects as $proj) {
    if (!in_array($proj->nid, $mapped)) {
      $entity = $proj->_field_data['nid']['entity'];
      if(array_key_exists(LANGUAGE_NONE, $entity->field_project_address)) {
        $lat = $entity->field_project_address[LANGUAGE_NONE][0]['latitude'];
        $lon = $entity->field_project_address[LANGUAGE_NONE][0]['longitude'];
        $has_coordinates = (int)($lat + $lon);

        if ($has_coordinates) {
          $markers[] = array(
            'markername' => 'small lblue', //conditionalize later for project status
            'latitude'   => $lat,
            'longitude'  => $lon,
            'rmt'        => $proj->nid,
          );
          $mapped[] = $proj->nid;
        }
      }
    }
  }

  $map['markers'] = $markers;
  $element = array('#type' => 'gmap', '#gmap_settings' => $map);
  $view_more_link = '<div class="view-larger">'. l('View Larger &raquo;', 'projects/map', array('query' => array('f' => array('sm_field_project_status:1')), 'html' => TRUE))  . '</div><div class="map-container">';
  return array('#markup' => $view_more_link . drupal_render($element) . "</div>");
}

function iobyproject_views_query_alter(&$view, &$query) {
  if($view->name == 'project_view' && $view->current_display == 'page_3') {
    $query->where[0]['conditions'][] = array(
      'field' => 'location_instance.genid',
      'value' => array('cck:field_project_address%'),
      'operator' => 'LIKE',
    );
  }
  if ($view->name == 'campaign_tabs' && $view->current_display == 'campaign_projects_grid') {
    $q = drupal_get_query_parameters();
    if (isset($q['items_per_page']) && $q['items_per_page'] == 'all') {
      $view->set_items_per_page(0);
    }
  }
}

function iobyproject_leader() {
  $node = menu_get_object();

  if (empty($node)) {
    return '';
  }

  $leader = user_load($node->uid);
  if (empty($leader->field_user_bio) || strlen($leader->field_user_bio['und'][0]['safe_value']) < 10) {
    return FALSE;
  }
  $ret = text_summary($leader->field_user_bio['und'][0]['safe_value'], NULL, 160) . " " . l("See full profile »", "user/" . $node->uid);

  return array('#markup' => $ret);
}

/**
 * Output for the incentives block
 */
function iobyproject_incentives() {
  $node = menu_get_object();

  //do nothing if project doesn't have incentives
  if (empty($node->field_incentives[LANGUAGE_NONE])) {
    return FALSE;
  }

  $incentives = array();

  foreach ($node->field_incentives[LANGUAGE_NONE] as $id) {
    $item = field_collection_item_load($id['value']);
    $incentives[] = array(
      'incentive_level' => '$' . number_format($item->field_incentive_level[LANGUAGE_NONE][0]['value']),
      'incentive_description' => $item->field_incentive_description[LANGUAGE_NONE][0]['safe_value'],
    );
  }

  return array('#markup' => theme('iobyproject-incentives', array('incentives' => $incentives)));
}

function iobyproject_countdown() {
  $node = menu_get_object();

  //do nothing if project doesn't have deadline
  if (empty($node->field_deadline[LANGUAGE_NONE])) {
    return FALSE;
  }

  $deadline_date = new DateTime($node->field_deadline[LANGUAGE_NONE][0]['value'], new DateTimeZone($node->field_deadline[LANGUAGE_NONE][0]['timezone']));
  $current_date = new DateTime(date('Y-m-d'), new DateTimeZone($node->field_deadline[LANGUAGE_NONE][0]['timezone']));

  if ($deadline_date > $current_date) {
    $days_left = $deadline_date->diff($current_date, TRUE)->days;
  }
  elseif ($deadline_date == $current_date) {
    $days_left = 0;
  }
  else {
    $days_left = -1;
  }

  return array('#markup' => theme('iobyproject-countdown', array('deadline' => $deadline_date, 'days_left' => $days_left)));
}

/**
 * Implements hook_theme().
 */
function iobyproject_theme($existing, $type, $theme, $path) {
  return array(
    'iobyproject-funding-view' => array(
      'template' => 'templates/funding-view',
      'variables' => array('funding' => NULL),
    ),
    'iobyproject-volunteer-email' => array(
      'template' => 'templates/volunteer-email',
      'variables' => array('form_vars' => NULL),
    ),
    'iobyproject-volunteer-confirm-email' => array(
      'template' => 'templates/volunteer-confirm-email',
      'variables' => array('form_vars' => NULL),
    ),
    'iobyproject-incentives' => array(
      'template' => 'templates/incentives',
      'variables' => array('incentives' => NULL),
    ),
    'iobyproject-countdown' => array(
      'template' => 'templates/countdown',
      'variables' => array('deadline' => NULL, 'days_left' => NULL),
    ),
    'iobyproject-project-gallery' => array(
      'template' => 'templates/project-gallery',
      'variables' => array('gallery_items' => NULL),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function iobyproject_form_alter(&$form, &$form_state, $form_id) {
  if (in_array($form_id, array('project_2_node_form', 'project_blog_node_form'))) {
    $form['revision_information']['#access'] = user_access('view revisions');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Makes modifications to the node form for project_2 nodes
 */
function iobyproject_form_project_2_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'iobyproject') . '/js/disable_show_row_weights.js',
      drupal_get_path('module', 'iobyproject') . '/js/tipped.js',
      drupal_get_path('module', 'iobyproject') . '/js/projectform.js',
      drupal_get_path('module', 'iobyproject') . '/js/jquery.multiselect.js',
      drupal_get_path('module', 'iobyproject') . '/js/jquery.select-multiple.js'
  );

  $form['#attached']['css'] = array(
      drupal_get_path('module', 'iobyproject') . '/css/tipped.css',
      drupal_get_path('module', 'iobyproject') . '/css/jquery.multiselect.css',
      drupal_get_path('module', 'iobyproject') . '/css/select-multiple.css'
  );

  // Get rid of fieldset around the project photo field
  $form['field_project_photo']['und']['#theme_wrappers'][0] = 'container';

  // Fake field title and help text since removing the fieldset wrapper got rid of them
  $form['field_project_photo']['field_project_photo_title'] = array(
    '#weight' => -99,
    '#markup' => '<label>' . $form['field_project_photo']['und']['#title'] . '</label>',
  );
  $form['field_project_photo']['field_project_photo_description'] = array(
    '#weight' => -98,
    '#markup' => '<div class="description">' . $form['field_project_photo']['und']['#description'] . '</div>',
  );


  $form['#attributes']['class'][] = 'project-form-version-' . (isset($form['#node']->project_form_version) ? $form['#node']->project_form_version : 2);
  $form['#after_build'][] = 'iobyproject_project_2_after_build';
  $form['#validate'][] = 'iobyproject_project_form_validate';

  // Make sure administrator fields aren't accessible
  foreach (_iobyproject_admin_fields() as $field_name) {
    $form[$field_name]['#access'] = user_access('administer content');
  }

  // Remove deprecated age selection options
  $old_demo_age_options = array(
    'Youth (under 14)',
    'Students (14-25)',
    'Adults (25-60)',
    'Seniors (60+)'
  );

  if (!isset($form['#node']->project_form_version) || $form['#node']->project_form_version == 2) {
    // Remove deprecated options from the demo_age field
    foreach ($old_demo_age_options as $option) {
      unset($form['field_demo_age'][LANGUAGE_NONE]['#options'][$option]);
    }

    $form['field_project_budget']['#access'] = FALSE;

    foreach (_iobyproject_plain_text_fields() as $field_name) {
      $form[$field_name][LANGUAGE_NONE][0]['#format'] = 'plain_text';
      $form[$field_name][LANGUAGE_NONE][0]['format']['format']['#default_value'] = 'plain_text';
    }

    $form['field_sponsor_email']['#states'] = array(
      'visible' => array(
        ':input[name="field_demo_age[und]"]' => array('value' => '0-17'),
      ),
      'required' => array(
        ':input[name="field_demo_age[und]"]' => array('value' => '0-17'),
      ),
    );
    $form['field_group_tax_fisc_spon']['#states'] = array(
      'visible' => array(
        ':input[name="field_group_tax_fisc_ioby[und]"]' => array('value' => '1'),
      ),
      'required' => array(
        ':input[name="field_group_tax_fisc_ioby[und]"]' => array('value' => '1'),
      ),
    );
    $form['field_project_vol_reason']['#states'] = array(
      'visible' => array(
        ':input[name="field_project_volunteers[und]"]' => array('value' => '1'),
      ),
      'required' => array(
        ':input[name="field_project_volunteers[und]"]' => array('value' => '1'),
      ),
    );
    $form['field_incentives_instructions']['#states'] = array(
      'visible' => array(
        ':input[name="field_promote_giving_levels[und]"]' => array('value' => '1'),
      ),
    );
    $form['field_incentives']['#states'] = array(
      'visible' => array(
        ':input[name="field_promote_giving_levels[und]"]' => array('value' => '1'),
      ),
      'required' => array(
        ':input[name="field_promote_giving_levels[und]"]' => array('value' => '1'),
      ),
    );
    $form['actions']['submit']['#states'] = array(
      'enabled' => array(
        ':input[name="field_eligible[und]"]' => array('checked' => TRUE),
      ),
    );
  }

  // Backwards compatibility for version 1 of the project form
  if (isset($form['#node']->project_form_version) && $form['#node']->project_form_version == 1) {
    $form['field_ioby_platform_fee']['#access'] = FALSE;
    $form['field_ioby_processing_fee']['#access'] = FALSE;
    $form['field_ioby_sponsorship_fee']['#access'] = FALSE;
    $form['field_ro_platform_fee']['#access'] = FALSE;
    $form['field_ro_processing_fee']['#access'] = FALSE;
    $form['field_ro_sponsorship_fee']['#access'] = FALSE;
    $form['field_project_total_cost']['#access'] = FALSE;
    $form['field_budget_sandbox']['#access'] = FALSE;

    // For the old version of the form, the math calculation should just mirror the
    // project_cost field since ioby staff manually changes this after the project
    // organizer submits the project.
    $form['field_project_total_cost'][LANGUAGE_NONE][0]['display']['#settings']['expression'] = '[field_project_cost:0:value]';
  }

  $form['title']['#description'] = t('Make this short and sweet. This name will be associated with your project throughout the ioby site.');

  $form['field_ioby_platform_fee'][LANGUAGE_NONE][0]['value']['#size'] = 5;
  $form['field_ioby_processing_fee'][LANGUAGE_NONE][0]['value']['#size'] = 5;
  $form['field_ioby_sponsorship_fee'][LANGUAGE_NONE][0]['value']['#size'] = 5;

  $form['project_form_version'] = array(
    '#type' => 'item',
    '#title' => 'Project form version',
    '#markup' => isset($form['#node']->project_form_version) ? $form['#node']->project_form_version : 2,
    '#access' => user_access('administer content'),
  );

  $form['actions']['submit']['#value'] = 'Launch your ioby Campaign!';
  $form['actions']['detail'] = array(
    '#markup' => '<div class="submit-detail">All done? Once you click submit, your application will be sent to your future ioby strategist for review. We’ll be in touch soon to kick-off your campaign!</div>',
    '#weight' => 100,
  );
}

/**
 * Implements hook_page_alter().
 */
function iobyproject_page_alter(&$page) {
  if (isset($_GET['q']) && $_GET['q'] == 'node/add/project-2') {
    drupal_set_title(t('Start a Project'));
  }
}

/**
 * Form validation callback for project_2 node forms
 */
function iobyproject_project_form_validate($form, &$form_state) {
  // Validation for version 2 of the form
  if (!isset($form['#node']->project_form_version) || $form['#node']->project_form_version == 2) {
    if (isset($form_state['values']['field_demo_age'][LANGUAGE_NONE][0]) && $form_state['values']['field_demo_age'][LANGUAGE_NONE][0]['value'] == '0-17') {
      if (empty($form_state['values']['field_sponsor_email'][LANGUAGE_NONE][0]['email'])) {
        $field_info = field_info_instance('node', 'field_sponsor_email', PROJECT_NODE_TYPE);
        form_set_error('field_sponsor_email', $field_info['label'] . ' field is required.');
      }
    }

    if (isset($form_state['values']['field_group_tax_fisc_ioby'][LANGUAGE_NONE][0]) && $form_state['values']['field_group_tax_fisc_ioby'][LANGUAGE_NONE][0]['value'] == '1') {
      if (empty($form_state['values']['field_group_tax_fisc_spon'][LANGUAGE_NONE][0]['value'])) {
        $field_info = field_info_instance('node', 'field_sponsor_email', PROJECT_NODE_TYPE);
        form_set_error('field_group_tax_fisc_spon', $field_info['label'] . ' field is required.');
      }
    }

    if (isset($form_state['values']['field_project_volunteers'][LANGUAGE_NONE][0]) && $form_state['values']['field_project_volunteers'][LANGUAGE_NONE][0]['value'] == '1') {
      if (empty($form_state['values']['field_project_vol_reason'][LANGUAGE_NONE][0]['value'])) {
        $field_info = field_info_instance('node', 'field_sponsor_email', PROJECT_NODE_TYPE);
        form_set_error('field_project_vol_reason', $field_info['label'] . ' field is required.');
      }
    }

    if (isset($form_state['values']['field_promote_giving_levels'][LANGUAGE_NONE][0]) && $form_state['values']['field_promote_giving_levels'][LANGUAGE_NONE][0]['value'] == '1') {
      if (empty($form_state['values']['field_incentives'][LANGUAGE_NONE][0])) {
        $field_info = field_info_instance('node', 'field_sponsor_email', PROJECT_NODE_TYPE);
        form_set_error('field_incentives', $field_info['label'] . ' field is required.');
      }
    }
  }
}

/**
 * After build callback for project_2 node forms
 */
function iobyproject_project_2_after_build($form, &$form_state) {
  if (!isset($form['#node']->project_form_version) || $form['#node']->project_form_version == 2) {
    // Hide filter format tips, WYSIWYG switch, and text input drop-down for plain_text fields
    foreach (_iobyproject_plain_text_fields() as $field_name) {
      $form[$field_name][LANGUAGE_NONE][0]['format']['format']['#options'] = array('plain_text' => 'Plain Text');
      $form[$field_name][LANGUAGE_NONE][0]['format']['#access'] = FALSE;
      $form[$field_name][LANGUAGE_NONE][0]['format']['guidelines']['#access'] = FALSE;
      $form[$field_name][LANGUAGE_NONE][0]['format']['help']['#access'] = FALSE;
    }
  }

  return $form;
}

/**
 * Internal callback to return fields that should use the plain_text input filter
 *
 * @return array
 */
function _iobyproject_plain_text_fields() {
  return array('field_project_inbrief', 'field_project_leader_bio',
    'field_project_desc', 'field_project_issue', 'body',
    'field_project_vol_reason');
}

/**
 * Internal callback to return fields that are for admins only
 *
 * @return array
 */
function _iobyproject_admin_fields() {
  return array('field_project_status', 'field_ioby_platform_fee',
    'field_ioby_processing_fee', 'field_ioby_sponsorship_fee',
    'field_project_facet', 'field_project_impact_areas');
}

function iobyproject_donation_form($form, &$form_state) {

  $form = array();
  $form['project_id'] = array(
    '#type' => 'hidden',
    '#value' => arg(1),
  );
  $form['donation'] = array(
    '#type' => 'textfield',
    '#field_prefix' => '$',
    '#default_value' => '',
    '#size' => 10,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Donate to this project',
    '#attributes' => array( 'class' => array('button'))
  );
  return $form;
}

function iobyproject_donation_form_validate($form, &$form_state) {
  global $user;

  if (empty($form_state['values']['donation']) || !is_numeric($form_state['values']['donation']) || intval($form_state['values']['donation']) <= 0) {
    form_set_error('donation', t('To give to this project, please enter a valid dollar amount.'));
  }

  if ($cart = commerce_cart_order_load($user->uid)) {
    if (!empty($cart->commerce_line_items[LANGUAGE_NONE])) {
      $line_item_ids = array();
      foreach ($cart->commerce_line_items[LANGUAGE_NONE] as $line_item) {
        $line_item_ids[] = $line_item['line_item_id'];
      }

      $line_items = commerce_line_item_load_multiple($line_item_ids);
      foreach ($line_items as $line_item) {
        if (strpos($line_item->line_item_label, 'project_' . $form_state['values']['project_id']) !== FALSE) {
          form_set_error('donation', t('You\'ve already added a donation for this project to your cart. You can update your donation amount for this project !here.', array('!here' => l('here', 'cart'))));
          break;
        }
      }
    }
  }
}

/**
 * Adds donation to cart
 */
function iobyproject_donation_form_submit($form, &$form_state) {
  global $user;
  $account = user_load($user->uid);

  $project_id = $form_state['values']['project_id']; // change from form value;
  $price =      $form_state['values']['donation']; // change from form value;
  $amount = commerce_currency_decimal_to_amount($price, 'USD');
  $project = node_load($project_id);

  $product = commerce_product_new('project');
  $product->sku = 'project_' . $project_id . '_date_' . time();
  $product->title = $project->title;
  $product->uid = $account->uid;

  $product->commerce_price['und'][0]['amount'] = $amount;
  $product->commerce_price['und'][0]['currency_code'] = 'USD';

  $product->field_project_node['und'][0]['nid'] = $project_id;

  commerce_product_save($product);

  // Create a new shopping cart order and add the product to it.
  $order = commerce_order_new($account->uid, 'pending');

  commerce_cart_product_add($account->uid, commerce_product_line_item_new($product), TRUE);

  drupal_goto('cart');
}


function iobyproject_volunteer_form($form, &$form_state) {
  global $user;
  $mail = '';
  if(isset($user->mail)) {
    $mail = $user->mail;
  }

  $form = array();
  $form['project_id'] = array(
    '#type' => 'hidden',
    '#value' => arg(1), //um?
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Your email address'),
    '#default_value' => $mail,
  );

  $form['explanation'] = array(
    '#type'  => 'textarea',
    '#title' => 'Please explain how you\'d like to help.',
  );

  $form['contact'] = array(
    '#type'  => 'textarea',
    '#title' => 'Please provide your contact information.',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'send inquiry',
    '#attributes' => array( 'class' => array('button'))
  );
  return $form;
}

function iobyproject_volunteer_form_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['email'])) {
    form_set_error('email', t('You must provide a valid email address.'));
  }
  //should probably check other fields too...

  if (!  $form_state['values']['project_id'] ) {
    form_set_error('submit', t('Sorry, but no project was affiliated with this form.'));
  }
}

function iobyproject_volunteer_form_submit($form, &$form_state) {
  $project_id = $form_state['values']['project_id']; // change from form value;
  $project = node_load($project_id);
  $recipient = $project->field_project_contact_email['und'][0]['email'];

  $params = array(
    'subject' => 'ioby project volunteer inquiry',
    'vars' => array_merge($form_state['values'], array("project_title" => $project->title)),
  );
  drupal_mail('iobyproject', 'volunteer_interest', $recipient, language_default(), $params);
  drupal_mail('iobyproject', 'volunteer_confirm', $form_state['values']['email'], language_default(), $params);
  drupal_set_message(t("Message sent. Thanks!"));
  $form_state['redirect'] = 'volunteerform/' . $project_id . "?ajax=1";
}

/**
 * Implements hook_menu().
 */
function iobyproject_menu() {
  $items = array();

  $items['volunteerform'] = array(
    'page callback'   => 'iobyproject_volunteerform',
    'type'            => MENU_CALLBACK,
    'access callback' => TRUE,
    'title'           => 'Volunteer Inquiry',
  );

  $items['projectinfo/popup'] = array(
    'page callback'   => 'iobyproject_popup',
    'type'            => MENU_CALLBACK,
    'access callback' => TRUE,
    'title'           => 'Ajax Test'
  );

  return $items;
}


function iobyproject_popup( $node_id ) {
  $node = node_load($node_id);
  $my_img = render(field_view_field('node', $node, 'field_project_photo', array('label' => 'hidden', 'settings' => array('image_style' => 'thumbnail'))));
  printf('<div class="map-popup">%s<h5>%s</h5><p>Project Leader: %s</p></div>', $my_img, l($node->title, drupal_get_path_alias("node/" . $node_id)), l($node->name, "user/" . $node->name));

  module_invoke_all('exit');
  die();
}


//function callback from hook_menu to generate the form
function iobyproject_volunteerform() {
  drupal_set_title(t("Volunteer Inquiry"));
  return drupal_get_form('iobyproject_volunteer_form');
}


/**
 * Implements hook_mail().
 */
function iobyproject_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];

  switch ($key) {
    case 'volunteer_interest':
      $message['body'][] = theme('iobyproject-volunteer-email', array('form_vars' => $params['vars']));
      break;
    case 'volunteer_confirm':
      $message['body'][] = theme('iobyproject-volunteer-confirm-email', array('form_vars' => $params['vars']));
      break;
    default:
      break;
  }
}

/**
 * Shows sponsor information for a given project
 **/
function iobyproject_show_sponsor($project_id) {
  $out = array();
  $project_wrapper = entity_metadata_wrapper('node', node_load($project_id));

  list($needed, $budget) = iobyproject_funded_amount($project_wrapper->value());

  // get campaign based on project id
  $query = new EntityFieldQuery();
  $campaign_ids = $query->entityCondition('entity_type', 'node')
                        ->entityCondition('bundle', 'campaign')
                        ->fieldCondition('field_campaign_project', 'nid', $project_id)
                        ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
                        ->execute();

  if(array_key_exists('node', $campaign_ids)) {
    $campaigns = node_load_multiple(array_keys($campaign_ids['node']));

    foreach($campaigns as $campaign_id => $campign) {
      // skip completed campaigns.
      $campaign_wrapper = entity_metadata_wrapper('node', $campign);
      if($campaign_wrapper->field_campaign_complete->value()) {
        continue;
      }

      $sponsor_msg = $sponsor_teaser = '';
      $sponsor_title = $campaign_wrapper->field_campaign_sponsor->title->value();

      // set up sponsorship messages.
      if($project_wrapper->field_project_status->value() == PROJECT_STATUS_COMPLETED) {
        // Project is fully funded or complete.. Set closed message
        $sponsor_msg = $sponsor_teaser = t('This project was sponsored in part by %sponsor', array(
          '%sponsor'=> $sponsor_title));
      }
      elseif (ioby_campaign_is_active($campaign_wrapper)) {
        // project has active campaign.
        // get customized banner message
        if ($project_wrapper->field_project_status->value() == PROJECT_STATUS_FUNDED) {
          $sponsor_msg = ($campaign_wrapper->field_funded_message_banner->value())
            ? $campaign_wrapper->field_funded_message_banner->value()
            : $campaign_wrapper->field_message_banner->value();

          $sponsor_teaser = ($campaign_wrapper->field_funded_message_teaser->value())
            ? $campaign_wrapper->field_funded_message_teaser->value()
            : $campaign_wrapper->field_message_teaser->value();
        }
        else {
          $sponsor_msg = $campaign_wrapper->field_message_banner->value();
          $sponsor_teaser = $campaign_wrapper->field_message_teaser->value();
        }

        if (empty($sponsor_msg)) {
          // no customized banner message. Use a default message.
          $max_donation = $campaign_wrapper->field_campaign_max->value();
          $percent_match = $campaign_wrapper->field_percent_match->value();
          $end_date = $campaign_wrapper->field_campaign_dates->value2->value();
          $total_gift = $campaign_wrapper->field_campaign_amount->value();
          //build the string
          $sponsorship[] = t('Sponsored by !sponsor!',array("!sponsor"=>$sponsor_title))." ";
          $sponsorship[] = ($max_donation) ? t('Gifts up to $!amount will be matched',array('!amount'=>intval($max_donation))) : t('Gifts of any amount will be matched');
          $sponsorship[] = ($percent_match == 100) ? t('dollar-for-dollar') : t("at !percent% of the gift value",array("!percent"=>intval($percent_match)));
          $sponsorship[] = "until";
          $sponsorship[] = format_date($end_date, 'custom', 'F j, Y') . " or " . t("$!max is paid out, whichever comes first.",array("!max"=>number_format($total_gift,0)));

          $sponsor_msg = implode(" ", $sponsorship);
        }
        if(empty($sponsor_teaser)) {
          $sponsor_teaser = t("Sponsored by !sponsor",array("!sponsor"=>$sponsor_title));
        }
      }

      // insert values to output
      $out[$campaign_id] = array(
        'sponsor_name' => $sponsor_title,
        'sponsor_message' => $sponsor_msg,
        'sponsor_teaser' => $sponsor_teaser,
      );
    }
  }

  return $out;
}

/**
 * Shows donation history
 **/
function iobyproject_show_donations($project_id) {
  $query = db_select('node', 'project');
  $query->leftJoin('field_data_field_project_node', 'pn', 'field_project_node_nid=' . $project_id);
  $query->leftJoin('commerce_product', 'cp', 'cp.product_id = pn.entity_id');
  $query->leftJoin('field_data_commerce_price', 'price', 'price.entity_id = cp.product_id');

  $query->condition('nid', $project_id);

  $result = $query->execute()->fetchAssoc();
  return $result;
}

/**
 * gets the total $ raised for a given project, in theory. Option to include matches
 */
function iobyproject_amount_raised($project_id, $include_matches = TRUE) {
  $project = node_load($project_id);

  // Collect donations;
  $donation_amount = 0;
  $query = new EntityFieldQuery();
  $donations_ids = $query->entityCondition('entity_type', 'node')
                         ->entityCondition('bundle', 'donation')
                         ->fieldCondition('field_donation_project', 'nid', $project_id)
                         ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
                         ->execute();

  if(array_key_exists('node', $donations_ids)) {
    $donations = node_load_multiple(array_keys($donations_ids['node']));
    foreach($donations as $donation) {
      $donation_amount += $donation->field_donation_amount[LANGUAGE_NONE][0]['value'];
    }
  }

  $match_amount = 0;
  if ($include_matches) {
    $query = new EntityFieldQuery();
    $donation_match_ids = $query->entityCondition('entity_type', 'node')
                                ->entityCondition('bundle', 'donation_match')
                                ->fieldCondition('field_donation_match_project', 'nid', $project_id)
                                ->fieldCondition('field_donation_match_status', 'value', DONATION_MATCH_STATUS_COMPLETE)
                                ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
                                ->execute();

    if(array_key_exists('node', $donation_match_ids)) {
      $donation_matches = node_load_multiple(array_keys($donation_match_ids['node']));

      foreach($donation_matches as $donation_match) {
        $match_amount += $donation_match->field_donation_match_amount[LANGUAGE_NONE][0]['value'];
      }
    }
  }
  $amt_raised = round($donation_amount + $match_amount);
  $amt_needed = array_key_exists(LANGUAGE_NONE, $project->field_project_total_cost) ? $project->field_project_total_cost[LANGUAGE_NONE][0]['value'] : .01;
  $amt_to_go = $amt_needed - $amt_raised;
  if ($amt_to_go < 0 ) {
    $amt_to_go = 0;
    //$amt_raised = $amt_needed;
  }

  if($amt_to_go == 0) {
    iobyproject_set_status_to_funded($project);
  }

  $pct_done = 0;
  if ($amt_needed > 0) {
    $pct_done = floor(($amt_raised/$amt_needed) * 100);
    if($pct_done > 100) {
      $pct_done = 100;
    }
  }

  return array(
    'donation_amount' => $donation_amount,
    'match_amount'    => $match_amount,
    'amount_raised'   => $amt_raised,
    'amount_to_go'    => $amt_to_go,
    'amount_needed'   => $amt_needed,
    'pct_done'        => $pct_done,
  );
}

/**
 * Updates status to 'Funded' if the project is 'Open' or 'Submitted'
 */
function iobyproject_set_status_to_funded($project) {
  $status = $project->field_project_status[LANGUAGE_NONE][0]['value'];
  if ($status == PROJECT_STATUS_OPEN) {
    $project->field_project_status[LANGUAGE_NONE][0]['value'] = PROJECT_STATUS_FUNDED;
    node_save($project);

    // Notify the rules module that the project has been funded
    rules_invoke_event('iobyproject_project_funded', $project);
  }
}

/**
 * Updates the product totals cache
 */
function update_project_totals_cache() {
  $sql = "REPLACE INTO {iobyproject_totals_cache} (nid, total, changed)
  SELECT project_nid, SUM(total) AS total, UNIX_TIMESTAMP()
  FROM
  (
    SELECT p.field_donation_project_nid AS project_nid, SUM(a.field_donation_amount_value) AS total
    FROM {node} n
      INNER JOIN {field_data_field_donation_project} p ON n.nid = p.entity_id
      INNER JOIN node pn ON p.field_donation_project_nid = pn.nid
      INNER JOIN {field_data_field_donation_amount} a ON n.nid = a.entity_id
    WHERE n.type = 'donation' and pn.status = :node_status AND p.field_donation_project_nid IS NOT NULL
    GROUP BY p.field_donation_project_nid
    UNION ALL
    SELECT p.field_donation_match_project_nid AS project_nid, SUM(a.field_donation_match_amount_value) AS total
    FROM {node} n
      INNER JOIN {field_data_field_donation_match_project} p ON n.nid = p.entity_id
      INNER JOIN node pn ON p.field_donation_match_project_nid = pn.nid
      INNER JOIN {field_data_field_donation_match_amount} a ON n.nid = a.entity_id
      INNER JOIN {field_data_field_donation_match_status} s ON n.nid = s.entity_id
    WHERE n.type = 'donation_match' AND pn.status = :node_status AND p.field_donation_match_project_nid IS NOT NULL
      AND s.field_donation_match_status_value = :status
    GROUP BY p.field_donation_match_project_nid
  ) t
  GROUP BY project_nid";

  db_query($sql,
    array(
      ':node_status' => NODE_PUBLISHED,
      ':status' => DONATION_MATCH_STATUS_COMPLETE,
    )
  );
}

/**
 * Implements hook_cron().
 */
function iobyproject_cron() {
  update_project_totals_cache();
}

/**
 * Implements hook_views_api().
 */
function iobyproject_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'iobyproject'),
  );
}

/**
 * Implements hook_node_load().
 */
function iobyproject_node_load($nodes, $types) {
  if (!in_array(PROJECT_NODE_TYPE, $types)) {
    return;
  }

  $project_nids = array();

  foreach($nodes as $node) {
    if ($node->type == PROJECT_NODE_TYPE) {
      $project_nids[] = $node->nid;
    }
  }

  if (!empty($project_nids)) {
    $projects = db_select('iobyproject_node_extra', 'p')
      ->fields('p')
      ->condition('p.nid', $project_nids, 'IN')
      ->execute()
      ->fetchAll();

    foreach ($projects as $project) {
      $nodes[$project->nid]->project_form_version = $project->project_form_version;
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function iobyproject_node_insert($node) {
  if ($node->type == PROJECT_NODE_TYPE) {
    db_insert('iobyproject_node_extra')
      ->fields(
        array(
          'nid' => $node->nid,
          'project_form_version' => 2,
        )
      )->execute();
  }
}

/**
 * Implements hook_node_delete().
 */
function iobyproject_node_delete($node) {
  if ($node->type == PROJECT_NODE_TYPE) {
    db_delete('iobyproject_node_extra')->condition('nid', $node->nid, '=')->execute();
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function iobyproject_field_extra_fields() {
  $extra['node']['project_2'] = array(
    'form' => array(
      'project_form_version' => array(
        'label' => t('Project Form Version'),
        'description' => t('Custom form item (iobyproject)'),
        'weight' => 100,
      ),
    ),
  );

  return $extra;
}

function iobyproject_check_project_funding($project_id) {
  $project_totals = iobyproject_amount_raised($project_id);
  $project_percent_complete = $project_totals['pct_done'];
  $thresholds = array(25, 50, 75);


  if ($project_percent_complete != 100) {
    $project_notification_info = db_select('iobyproject_funding_notifications', 'n')
      ->fields('n')
      ->condition('nid', $project_id, '=')
      ->execute()
      ->fetchAssoc();

    // Make sure that the record exists
    if (!$project_notification_info) {
      $initial_threshold = 101;

      foreach ($thresholds as $threshold) {
        if ($project_percent_complete < $threshold) {
          $initial_threshold = $threshold;
          break;
        }
      }

      $project_notification_info = array(
        'nid' => $project_id,
        'next_notification_threshold' => $initial_threshold,
        'changed' => REQUEST_TIME
      );

      db_insert('iobyproject_funding_notifications')
        ->fields($project_notification_info)
        ->execute();
    }

    if ($project_percent_complete >= $project_notification_info['next_notification_threshold']) {
      // Notify the rules module that a project funding threshold has been reached
      rules_invoke_event('iobyproject_project_funding_threshold_reached', node_load($project_id), $project_notification_info['next_notification_threshold']);

      if ($project_notification_info['next_notification_threshold'] == $thresholds[count($thresholds) - 1]) {
        $next_threshold = 101;
      }
      else {
        $next_threshold = $thresholds[array_search($project_notification_info['next_notification_threshold'], $thresholds) + 1];
      }

      db_update('iobyproject_funding_notifications')
        ->condition('nid', $project_id, '=')
        ->fields(array(
          'next_notification_threshold' => $next_threshold,
          'changed' => REQUEST_TIME))
        ->execute();
    }
  }
}
