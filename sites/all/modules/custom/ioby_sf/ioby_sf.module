<?php

use Drupal\ioby_sf\Salesforce\CampaignQueueService;
use Drupal\ioby_sf\Salesforce\Models\Opportunity;
use Drupal\ioby_sf\Salesforce\OpportunityQueueService;
use Drupal\ioby_sf\Salesforce\Repository\OpportunityRepository;
use Drupal\ioby_sf\Salesforce\SalesforceSyncService;
use Drupal\ioby_sf\Salesforce\FundQueueService;
use Drupal\xautoload\Adapter\LocalDirectoryAdapter;
use Drupal\ioby_sf\Salesforce\Repository\SalesforceRepository;

define('IOBY_NODE_TYPE_PROJECT', 'project_2');
define('IOBY_NODE_TYPE_DONATION', 'donation');
define('IOBY_NODE_TYPE_DONATION_MATCH', 'donation_match');
define('IOBY_NODE_TYPE_CAMPAIGN', 'campaign');

define('IOBY_SF_WSDL_PRODUCTION', dirname(__FILE__) . '/ioby.production.wsdl.xml');
define('IOBY_SF_WSDL_SANDBOX', dirname(__FILE__) . '/ioby.sandbox.wsdl.xml');

// We only want orders after 11/07/2011 when the order system was cleaned up
define('IOBY_SF_ORDERS_START', 1320642000);

/**
 * Implements hook_cron().
 */
function ioby_sf_cron() {
  // Make sure this is only run in production
  if ($_SERVER['HTTP_HOST'] == 'ioby.org' || $_SERVER['HTTP_HOST'] == 'www.ioby.org') {
    ioby_sf_process_everything();
  }
}

/**
 * Implements hook_permission().
 */
function ioby_sf_permission() {
  $permissions = array();

  $permissions['execute salesforce sync'] = array(
    'title' => t('Execute Salesforce sync'),
    'description' => t('Manually execute the Salesforce sync process.'),
    'restrict access' => TRUE,
  );

  $permissions['set salesforce id'] = array(
    'title' => t('Set Salesforce Record ID'),
    'description' => t('Manually set Salesforce Record ID for projects.'),
    'restrict access' => TRUE,
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function ioby_sf_menu() {
  $items = array();

  $items['admin/structure/ioby-salesforce'] = array(
    'title' => 'Ioby Salesforce',
    'page callback' => 'ioby_sf_manual_sync',
    'file' => 'ioby_sf.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('execute salesforce sync'),

  );

  return $items;
}

/**
 * Implements hook_xautoload().
 *
 * @param LocalDirectoryAdapter $adapter
 */
function ioby_sf_xautoload(LocalDirectoryAdapter $adapter) {
  // Autoload the Salesforce client library
  $adapter->absolute()->composerJson(DRUPAL_ROOT . '/sites/all/libraries/salesforce/composer.json');
}

/**
 * Implements hook_node_load().
 */
function ioby_sf_node_load($nodes, $types) {
  if (!in_array(IOBY_NODE_TYPE_PROJECT, $types)) {
    return;
  }

  $project_nids = array();

  foreach($nodes as $node) {
    if ($node->type == IOBY_NODE_TYPE_PROJECT) {
      $project_nids[] = $node->nid;
    }
  }

  if (!empty($project_nids)) {
    $projects = db_select('ioby_sf_potential_projects', 'p')
      ->fields('p')
      ->condition('p.nid', $project_nids, 'IN')
      ->execute()
      ->fetchAll();

    foreach ($projects as $project) {
      $nodes[$project->nid]->salesforce_record_id = $project->salesforce_record_id;
      $nodes[$project->nid]->create_new_sf_object = $project->create_new_sf_object;
      $nodes[$project->nid]->connected_to_sf = $project->connected_to_sf;
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function ioby_sf_node_insert($node) {
  if ($node->type == IOBY_NODE_TYPE_PROJECT) {
    db_insert('ioby_sf_potential_projects')
      ->fields(
        array(
          'nid' => $node->nid,
          'create_new_sf_object' => $node->create_new_sf_object,
        )
      )
      ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function ioby_sf_node_update($node) {
  if ($node->type == IOBY_NODE_TYPE_PROJECT) {
    db_update('ioby_sf_potential_projects')
      ->fields(
        array(
          'nid' => $node->nid,
          'salesforce_record_id' => !empty($node->salesforce_record_id) ? SalesforceRepository::getSalesforceIdWithChecksum($node->salesforce_record_id) : NULL,
          'create_new_sf_object' => $node->create_new_sf_object,
        )
      )
      ->condition('nid', $node->nid, '=')
      ->execute();
  }
}

/**
 * Implements hook_node_delete().
 */
function ioby_sf_node_delete($node) {
  if ($node->type == IOBY_NODE_TYPE_PROJECT) {
    db_delete('ioby_sf_potential_projects')->condition('nid', $node->nid, '=')->execute();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ioby_sf_form_project_2_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];

  // If the project is already connected to Salesforce, don't allow the Id to be edited
  if (isset($node->connected_to_sf) && $node->connected_to_sf) {
    $form['salesforce_record_id'] = array(
      '#type' => 'item',
      '#markup' => "<strong>Salesforce Record Id: </strong>" . substr($form['#node']->salesforce_record_id, 0, 15),
      '#access' => user_access('set salesforce id'),
    );
  }
  else {
    $form['salesforce_record_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Salesforce Record ID'),
      '#default_value' => isset($form['#node']->salesforce_record_id) ? $form['#node']->salesforce_record_id : NULL,
      '#size' => 18,
      '#maxlength' => 18,
      '#access' => user_access('set salesforce id'),
    );
  }

  if (empty($node->salesforce_record_id)) {
    $form['create_new_sf_object'] = array(
      '#type' => 'checkbox',
      '#title' => t('This project can be published without a Salesforce ID'),
      '#default_value' => isset($form['#node']->create_new_sf_object) ? $form['#node']->create_new_sf_object : 0,
      '#access' => user_access('set salesforce id'),
    );
  }

  $form['#validate'][] = 'ioby_sf_project_validate';
}

/**
 * Callback on project node form to validate our custom salesforce fields
 */
function ioby_sf_project_validate($form, &$form_state) {
  if (array_key_exists('salesforce_record_id', $form_state['input']) && array_key_exists('create_new_sf_object', $form_state['input'])) {
    if (empty($form_state['values']['salesforce_record_id']) && empty($form_state['values']['create_new_sf_object'])) {
      form_set_error('salesforce_record_id', t('You must either enter a Salesforce Record ID or check the option to publish without a Salesforce Record ID.'));
    }
    elseif(!empty($form_state['values']['salesforce_record_id'])) {
      $salesforce_service = ioby_sf_get_salesforce_service();

      if (!$salesforce_service->campaignExists(SalesforceRepository::getSalesforceIdWithChecksum($form_state['values']['salesforce_record_id']))) {
        form_set_error('salesforce_record_id', t('The Campaign for the Salesforce Record ID that you entered does not exist.'));
      }
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function ioby_sf_field_extra_fields() {
  $extra['node'][IOBY_NODE_TYPE_PROJECT] = array(
    'form' => array(
      'salesforce_record_id' => array(
        'label' => t('Salesforce Record ID'),
        'description' => t('Text Field (ioby_sf)'),
        'weight' => 100,
      ),
      'create_new_sf_object' => array(
        'label' => t('This project can be published without a Salesforce ID'),
        'description' => t('Boolean (ioby_sf)'),
        'weight' => 100,
      ),
    ),
  );

  return $extra;
}

/**
 * Helper to return our instantiated service object.
 *
 * @return SalesforceSyncService|null
 */
function ioby_sf_get_salesforce_service() {
  $salesforce_service = &drupal_static(__FUNCTION__);

  if (!$salesforce_service) {
    $username = variable_get('ioby_salesforce_username', '');
    $password = variable_get('ioby_salesforce_password', '') . variable_get('ioby_salesforce_token', '');

    if ($_SERVER['HTTP_HOST'] == 'ioby.org' || $_SERVER['HTTP_HOST'] == 'www.ioby.org') {
      $wsdl = IOBY_SF_WSDL_PRODUCTION;
    }
    else {
      $wsdl = IOBY_SF_WSDL_SANDBOX;
    }

    try {
      $salesforce_service = new SalesforceSyncService($wsdl, $username, $password);
    }
    catch (\Exception $e) {
      ioby_sf_handle_exceptions($e);
      return NULL;
    }
  }

  return $salesforce_service;
}

/**
 * Gets new projects in Drupal and extracts all related objects into our
 * intermediate tables to be pushed to Salesforce.
 */
function ioby_sf_process_new_projects() {
  $transaction = db_transaction();

  try {
    $projectService = new CampaignQueueService();
    $projectService->queueNewCampaigns();
  }
  catch (\Exception $e) {
    ioby_sf_handle_exceptions($e, $transaction);
  }
}

/**
 * Gets projects in Drupal that have been modified since being extracted to our
 * intermediate tables, updates the necessary data in those tables, and flags the
 * records to be re-synced to Salesforce.
 */
function ioby_sf_process_modified_projects() {
  $transaction = db_transaction();

  try {
    $projectService = new CampaignQueueService();
    $projectService->queueModifiedCampaigns();
  }
  catch (\Exception $e) {
    ioby_sf_handle_exceptions($e, $transaction);
  }
}

/**
 * Gets new campaigns in Drupal and extracts all related objects into our
 * intermediate tables to be pushed to Salesforce.
 */
function ioby_sf_process_new_funds() {
  $transaction = db_transaction();

  try {
    $fundService = new FundQueueService();
    $fundService->queueNewFunds();
  }
  catch (\Exception $e) {
    ioby_sf_handle_exceptions($e, $transaction);
  }
}

/**
 * Gets campaigns in Drupal that have been modified since being extracted to our
 * intermediate tables, updates the necessary data in those tables, and flags the
 * records to be re-synced to Salesforce.
 */
function ioby_sf_process_modified_funds() {
  $transaction = db_transaction();

  try {
    $fundService = new FundQueueService();
    $fundService->queueModifiedFunds();
  }
  catch (\Exception $e) {
    ioby_sf_handle_exceptions($e, $transaction);
  }
}

/**
 * Gets new donations in Drupal and extracts all related objects into our
 * intermediate tables to be pushed to Salesforce.
 */
function ioby_sf_process_opportunities() {
  $transaction = db_transaction();
  try {
    $opportunityService = new OpportunityQueueService();
    $opportunityService->queueOpportunities();
  }
  catch (\Exception $e) {
    ioby_sf_handle_exceptions($e, $transaction);
  }
}

/**
 * Retrieves account objects that need to be pushed to Salesforce and pushes them.
 */
function ioby_sf_push_account_objects() {
  $salesforce_service = ioby_sf_get_salesforce_service();
  if (!isset($salesforce_service)) { return NULL; }

  $repository = new SalesforceRepository();

  try {
    $accounts = $repository->getAccounts();
    if (!empty($accounts)) {
      $salesforce_service->pushAccountObjects($accounts);
    }
  }
  catch (\Exception $e) {
    ioby_sf_handle_exceptions($e);
  }
}

/**
 * Retrieves campaign objects that need to be pushed to Salesforce and pushes them.
 */
function ioby_sf_push_campaign_objects() {
  $salesforce_service = ioby_sf_get_salesforce_service();
  if (!isset($salesforce_service)) { return NULL; }

  $repository = new SalesforceRepository();

  try {
    $new_campaigns = $repository->getNewCampaigns();
    if (!empty($new_campaigns)) {
      $salesforce_service->pushCampaignObjects($new_campaigns, TRUE);
    }

    $modified_campaigns = $repository->getModifiedCampaigns();
    if (!empty($modified_campaigns)) {
      $salesforce_service->pushCampaignObjects($modified_campaigns, FALSE);
    }
  }
  catch (\Exception $e) {
    ioby_sf_handle_exceptions($e);
  }
}

/**
 * Retrieves fund objects that need to be pushed to Salesforce and pushes them.
 */
function ioby_sf_push_fund_objects() {
  $salesforce_service = ioby_sf_get_salesforce_service();
  if (!isset($salesforce_service)) { return NULL; }

  $repository = new SalesforceRepository();

  try {
    $funds = $repository->getFunds();
    if (!empty($funds)) {
      $salesforce_service->pushFundObjects($funds);
    }
  }
  catch (\Exception $e) {
    ioby_sf_handle_exceptions($e);
  }
}

/**
 * Retrieves contact objects that need to be pushed to Salesforce and pushes them.
 */
function ioby_sf_push_contact_objects() {
  $salesforce_service = ioby_sf_get_salesforce_service();
  if (!isset($salesforce_service)) { return NULL; }

  $repository = new SalesforceRepository();

  try {
    $contacts = $repository->getContacts();
    if (!empty($contacts)) {
      $salesforce_service->pushContactObjects($contacts);
    }
  }
  catch (\Exception $e) {
    ioby_sf_handle_exceptions($e);
  }
}

/**
 * Retrieves fund grouping relationship objects that need to be pushed to
 * Salesforce and pushes them.
 */
function ioby_sf_push_fund_grouping_objects() {
  $salesforce_service = ioby_sf_get_salesforce_service();
  if (!isset($salesforce_service)) { return NULL; }

  $repository = new SalesforceRepository();

  try {
    $groupings = $repository->getFundCampaignGroupings();
    if (!empty($groupings)) {
      $salesforce_service->pushFundGroupingObjects($groupings);
    }
  }
  catch (\Exception $e) {
    ioby_sf_handle_exceptions($e);
  }
}

/**
 * Retrieves affiliation relationship objects that need to be pushed to
 * Salesforce and pushes them.
 */
function ioby_sf_push_affiliations() {
  $salesforce_service = ioby_sf_get_salesforce_service();
  if (!isset($salesforce_service)) { return NULL; }

  $repository = new SalesforceRepository();

  try {
    $affiliations = $repository->getAffiliations();
    if (!empty($affiliations)) {
      $salesforce_service->pushAffiliationObjects($affiliations);
    }
  }
  catch (\Exception $e) {
    ioby_sf_handle_exceptions($e);
  }
}

/**
 * Retrieves fund project participation objects that need to be pushed to
 * Salesforce and pushes them.
 */
function ioby_sf_push_project_participations() {
  $salesforce_service = ioby_sf_get_salesforce_service();
  if (!isset($salesforce_service)) { return NULL; }

  $repository = new SalesforceRepository();

  try {
    $project_participations = $repository->getProjectParticipations();
    if (!empty($project_participations)) {
      $salesforce_service->pushProjectParticipationObjects($project_participations);
    }
  }
  catch (\Exception $e) {
    ioby_sf_handle_exceptions($e);
  }
}

/**
 * Retrieves campaign member relationship objects that need to be pushed to
 * Salesforce and pushes them.
 */
function ioby_sf_push_campaign_members() {
  $salesforce_service = ioby_sf_get_salesforce_service();
  if (!isset($salesforce_service)) { return NULL; }

  $repository = new SalesforceRepository();

  try {
    $campaign_members = $repository->getCampaignMembers();
    if (!empty($campaign_members)) {
      $salesforce_service->pushCampaignMemberObjects($campaign_members);
    }
  }
  catch (\Exception $e) {
    ioby_sf_handle_exceptions($e);
  }
}

/**
 * Retrieves opportunity objects that need to be pushed to Salesforce and
 * pushes them.
 */
function ioby_sf_push_opportunities() {
  $salesforce_service = ioby_sf_get_salesforce_service();
  if (!isset($salesforce_service)) { return NULL; }

  $repository = new SalesforceRepository();

  try {
    $opportunities = $repository->getOpportunities();
    if (!empty($opportunities)) {
      $salesforce_service->pushOpportunityObjects($opportunities);
    }
  }
  catch (\Exception $e) {
    ioby_sf_handle_exceptions($e);
  }
}

/**
 * Retrieves manual opportunity objects that were synced down in Drupal from Salesforce
 * and updates the Salesforce record with the Drupal Id for the opportunity.
 */
function ioby_sf_push_manual_opportunities() {
  $salesforce_service = ioby_sf_get_salesforce_service();
  if (!isset($salesforce_service)) { return NULL; }

  $repository = new SalesforceRepository();

  try {
    $opportunities = $repository->getManualOpportunitiesForUpdate();
    if (!empty($opportunities)) {
      $salesforce_service->pushManualOpportunityUpdates($opportunities);
    }
  }
  catch (\Exception $e) {
    ioby_sf_handle_exceptions($e);
  }
}

function ioby_sf_pull_manual_donations() {
  $salesforce_service = ioby_sf_get_salesforce_service();
  if (!isset($salesforce_service)) { return NULL; }

  try {
    $salesforce_service->pullNewManualOpportunities();
  }
  catch (\Exception $e) {
    ioby_sf_handle_exceptions($e);
  }
}

/**
 * Checks the opportunities table for manual donations that were synced down
 * from Salesforce and creates the corresponding donation/match node is it
 * doesn't already exist.
 */
function ioby_sf_create_manual_donation_nodes() {
  $repository = new OpportunityRepository();

  $manual_donations = $repository->getNewManualSalesforceOpportunities();

  foreach ($manual_donations as $donation) {
    $node = new stdClass();
    $node->language = LANGUAGE_NONE;
    $node->created = $donation->getClosedDate();
    $node->changed = $donation->getClosedDate();
    $node->status = NODE_NOT_PUBLISHED;

    node_object_prepare($node);

    $node->field_entry_type['und'][0]['value'] = 'manual';

    if ($donation->getOpportunityType() == Opportunity::TYPE_DONATION) {
      $node->title = '(Salesforce Manual Donation) - ' . $donation->getName();
      $node->type = 'donation';
      $node->field_donation_amount[LANGUAGE_NONE][0]['value'] = $donation->getAmount();
      $node->field_donation_project[LANGUAGE_NONE][0]['nid'] = $donation->getProjectNid();
      $node->field_donation_info[LANGUAGE_NONE][0]['value'] = $donation->getDescription();
    }
    else {
      $node->title = '(Salesforce Manual Match) - ' . $donation->getName();
      $node->type = 'donation_match';
      $node->field_donation_match_amount[LANGUAGE_NONE][0]['value'] = $donation->getAmount();
      $node->field_donation_match_campaign[LANGUAGE_NONE][0]['nid'] = $donation->getCampaignNid();
      $node->field_donation_match_project[LANGUAGE_NONE][0]['nid'] = $donation->getProjectNid();
      $node->field_donation_match_status[LANGUAGE_NONE][0]['value'] = DONATION_MATCH_STATUS_COMPLETE;
    }

    node_save($node);

    db_update('ioby_sf_opportunities')
      ->fields(
        array(
          'nid' => $node->nid,
          'needs_update' => intval(TRUE),
        ))
      ->condition('opportunity_id', $donation->getOpportunityId(), '=')
      ->execute();
  }
}

/**
 * Helper function to log exceptions along with any nested exceptions and rollback
 * a transaction if one was passed in.
 *
 * @param Exception $e
 * @param DatabaseTransaction $transaction
 *
 * @return null
 */
function ioby_sf_handle_exceptions(\Exception $e, \DatabaseTransaction $transaction = NULL) {
  if (isset($transaction)) {
    try {
      $transaction->rollback();
    }
    catch (\DatabaseTransactionOutOfOrderException $de) {
      // TODO: Figure out why this is happening. I believe it is an underlying issue in Drupal somewhere but needs further investigation
    }
  }

  watchdog_exception('ioby_sf', $e);

  $previous_exception = $e->getPrevious();
  // Log any nested exceptions if they exist
  while (isset($previous_exception)) {
    watchdog_exception('ioby_sf', $previous_exception);
    $previous_exception = $previous_exception->getPrevious();
  }

  return NULL;
}

/**
 * Temporary callback to manually process and push everything
 */
function ioby_sf_process_everything() {
  // Process
  ioby_sf_process_new_projects();
  ioby_sf_process_modified_projects();
  ioby_sf_process_new_funds();
  ioby_sf_process_modified_funds();
  ioby_sf_process_opportunities();

  // Push
  ioby_sf_push_account_objects();
  ioby_sf_push_campaign_objects();
  ioby_sf_push_fund_objects();
  ioby_sf_push_contact_objects();
  ioby_sf_push_fund_grouping_objects();
  ioby_sf_push_affiliations();
  ioby_sf_push_project_participations();
  ioby_sf_push_campaign_members();
  ioby_sf_push_opportunities();
  ioby_sf_pull_manual_donations();
  ioby_sf_create_manual_donation_nodes();
  ioby_sf_push_manual_opportunities();
}
